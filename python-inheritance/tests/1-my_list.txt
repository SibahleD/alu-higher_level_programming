# 1-my_list.txt

# run test with python3 -m doctest -v ./tests/[filename].txt

First import method to test
>>> MyList = __import__('1-my_list').MyList

SUCCESS CASES:

Test present: check instantiation
     >>> my_list = MyList()
     >>> type(my_list)
     <class '1-my_list.MyList'>

Test present: check inherits from list
     >>> issubclass(MyList, list)
     True

Test present: check __str__
     >>> print(MyList())
     []

Test present: check append()
     >>> my_list = MyList()
     >>> my_list.append(3)
     >>> my_list.append(50)
     >>> my_list.append(-1)
     >>> print(my_list)
     [3, 50, -1]

Test present: check print_sorted() with sorted append
     >>> sorted_list = MyList()
     >>> sorted_list.append(-1)
     >>> sorted_list.append(3)
     >>> sorted_list.append(50)
     >>> sorted_list.print_sorted()
     [-1, 3, 50]

Test present: check print_sorted() with not sorted append
     >>> not_sorted_list = MyList()
     >>> not_sorted_list.append(50)
     >>> not_sorted_list.append(3)
     >>> not_sorted_list.append(-1)
     >>> not_sorted_list.print_sorted()
     [-1, 3, 50]

Test present: check print_sorted() with no sorted append with negative number
     >>> mixed_list = MyList()
     >>> mixed_list.append(-300)
     >>> mixed_list.append(50)
     >>> mixed_list.append(-1)
     >>> mixed_list.print_sorted()
     [-300, -1, 50]

Test present: check print_sorted() with empty list
     >>> empty_list = MyList()
     >>> empty_list.print_sorted()
     []

Test present: check print_sorted() returns a new list
     >>> new_list = MyList()
     >>> new_list.append(5)
     >>> new_list.append(3)
     >>> new_list.append(8)
     >>> id(new_list) is not id(new_list.print_sorted())
     True

Correct output - case: class creation
     >>> my_list = MyList()
     >>> isinstance(my_list, MyList)
     True

Correct output - case: class creation and regular print
     >>> my_list = MyList()
     >>> print(my_list)
     []

Correct output - case: class creation, append and regular print
     >>> my_list = MyList()
     >>> my_list.append(10)
     >>> print(my_list)
     [10]

Correct output - case: class creation, append, regular print and sorted print
     >>> my_list = MyList()
     >>> my_list.append(10)
     >>> print(my_list)
     [10]
     >>> my_list.print_sorted()
     [10]

Correct output - case: class creation, multiple appends, regular print and sorted print
     >>> my_list = MyList()
     >>> my_list.append(10)
     >>> my_list.append(2)
     >>> my_list.append(5)
     >>> print(my_list)
     [10, 2, 5]
     >>> my_list.print_sorted()
     [2, 5, 10]
